//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {

    public partial class Entity {

        public EffectMovementSpeed effectMovementSpeed { get { return (EffectMovementSpeed)GetComponent(ComponentIds.EffectMovementSpeed); } }
        public bool hasEffectMovementSpeed { get { return HasComponent(ComponentIds.EffectMovementSpeed); } }

        public Entity AddEffectMovementSpeed(System.Collections.Generic.Dictionary<SkillEffect, float> newEfToDuration) {
            var component = CreateComponent<EffectMovementSpeed>(ComponentIds.EffectMovementSpeed);
            component.efToDuration = newEfToDuration;
            return AddComponent(ComponentIds.EffectMovementSpeed, component);
        }

        public Entity ReplaceEffectMovementSpeed(System.Collections.Generic.Dictionary<SkillEffect, float> newEfToDuration) {
            var component = CreateComponent<EffectMovementSpeed>(ComponentIds.EffectMovementSpeed);
            component.efToDuration = newEfToDuration;
            ReplaceComponent(ComponentIds.EffectMovementSpeed, component);
            return this;
        }

        public Entity RemoveEffectMovementSpeed() {
            return RemoveComponent(ComponentIds.EffectMovementSpeed);
        }
    }

    public partial class Matcher {

        static IMatcher _matcherEffectMovementSpeed;

        public static IMatcher EffectMovementSpeed {
            get {
                if(_matcherEffectMovementSpeed == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.EffectMovementSpeed);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherEffectMovementSpeed = matcher;
                }

                return _matcherEffectMovementSpeed;
            }
        }
    }
}
