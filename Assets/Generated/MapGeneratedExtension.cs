//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {
    public partial class Entity {
        public Map map { get { return (Map)GetComponent(ComponentIds.Map); } }

        public bool hasMap { get { return HasComponent(ComponentIds.Map); } }

        public Entity AddMap(int newWidth, int newHeight, UnityEngine.GameObject newView) {
            var component = CreateComponent<Map>(ComponentIds.Map);
            component.width = newWidth;
            component.height = newHeight;
            component.view = newView;
            return AddComponent(ComponentIds.Map, component);
        }

        public Entity ReplaceMap(int newWidth, int newHeight, UnityEngine.GameObject newView) {
            var component = CreateComponent<Map>(ComponentIds.Map);
            component.width = newWidth;
            component.height = newHeight;
            component.view = newView;
            ReplaceComponent(ComponentIds.Map, component);
            return this;
        }

        public Entity RemoveMap() {
            return RemoveComponent(ComponentIds.Map);
        }
    }

    public partial class Pool {
        public Entity mapEntity { get { return GetGroup(Matcher.Map).GetSingleEntity(); } }

        public Map map { get { return mapEntity.map; } }

        public bool hasMap { get { return mapEntity != null; } }

        public Entity SetMap(int newWidth, int newHeight, UnityEngine.GameObject newView) {
            if (hasMap) {
                throw new EntitasException("Could not set map!\n" + this + " already has an entity with Map!",
                    "You should check if the pool already has a mapEntity before setting it or use pool.ReplaceMap().");
            }
            var entity = CreateEntity();
            entity.AddMap(newWidth, newHeight, newView);
            return entity;
        }

        public Entity ReplaceMap(int newWidth, int newHeight, UnityEngine.GameObject newView) {
            var entity = mapEntity;
            if (entity == null) {
                entity = SetMap(newWidth, newHeight, newView);
            } else {
                entity.ReplaceMap(newWidth, newHeight, newView);
            }

            return entity;
        }

        public void RemoveMap() {
            DestroyEntity(mapEntity);
        }
    }

    public partial class Matcher {
        static IMatcher _matcherMap;

        public static IMatcher Map {
            get {
                if (_matcherMap == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.Map);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherMap = matcher;
                }

                return _matcherMap;
            }
        }
    }
}
