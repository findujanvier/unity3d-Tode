//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {

    public partial class Entity {

        public TimeTotal timeTotal { get { return (TimeTotal)GetComponent(ComponentIds.TimeTotal); } }
        public bool hasTimeTotal { get { return HasComponent(ComponentIds.TimeTotal); } }

        public Entity AddTimeTotal(float newValue) {
            var component = CreateComponent<TimeTotal>(ComponentIds.TimeTotal);
            component.value = newValue;
            return AddComponent(ComponentIds.TimeTotal, component);
        }

        public Entity ReplaceTimeTotal(float newValue) {
            var component = CreateComponent<TimeTotal>(ComponentIds.TimeTotal);
            component.value = newValue;
            ReplaceComponent(ComponentIds.TimeTotal, component);
            return this;
        }

        public Entity RemoveTimeTotal() {
            return RemoveComponent(ComponentIds.TimeTotal);
        }
    }

    public partial class Pool {

        public Entity timeTotalEntity { get { return GetGroup(Matcher.TimeTotal).GetSingleEntity(); } }
        public TimeTotal timeTotal { get { return timeTotalEntity.timeTotal; } }
        public bool hasTimeTotal { get { return timeTotalEntity != null; } }

        public Entity SetTimeTotal(float newValue) {
            if(hasTimeTotal) {
                throw new EntitasException("Could not set timeTotal!\n" + this + " already has an entity with TimeTotal!",
                    "You should check if the pool already has a timeTotalEntity before setting it or use pool.ReplaceTimeTotal().");
            }
            var entity = CreateEntity();
            entity.AddTimeTotal(newValue);
            return entity;
        }

        public Entity ReplaceTimeTotal(float newValue) {
            var entity = timeTotalEntity;
            if(entity == null) {
                entity = SetTimeTotal(newValue);
            } else {
                entity.ReplaceTimeTotal(newValue);
            }

            return entity;
        }

        public void RemoveTimeTotal() {
            DestroyEntity(timeTotalEntity);
        }
    }

    public partial class Matcher {

        static IMatcher _matcherTimeTotal;

        public static IMatcher TimeTotal {
            get {
                if(_matcherTimeTotal == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.TimeTotal);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherTimeTotal = matcher;
                }

                return _matcherTimeTotal;
            }
        }
    }
}
