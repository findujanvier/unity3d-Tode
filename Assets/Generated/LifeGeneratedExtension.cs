//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {
    public partial class Entity {
        public Life life { get { return (Life)GetComponent(ComponentIds.Life); } }

        public bool hasLife { get { return HasComponent(ComponentIds.Life); } }

        public Entity AddLife(int newValue) {
            var component = CreateComponent<Life>(ComponentIds.Life);
            component.value = newValue;
            return AddComponent(ComponentIds.Life, component);
        }

        public Entity ReplaceLife(int newValue) {
            var component = CreateComponent<Life>(ComponentIds.Life);
            component.value = newValue;
            ReplaceComponent(ComponentIds.Life, component);
            return this;
        }

        public Entity RemoveLife() {
            return RemoveComponent(ComponentIds.Life);
        }
    }

    public partial class Pool {
        public Entity lifeEntity { get { return GetGroup(Matcher.Life).GetSingleEntity(); } }

        public Life life { get { return lifeEntity.life; } }

        public bool hasLife { get { return lifeEntity != null; } }

        public Entity SetLife(int newValue) {
            if (hasLife) {
                throw new EntitasException("Could not set life!\n" + this + " already has an entity with Life!",
                    "You should check if the pool already has a lifeEntity before setting it or use pool.ReplaceLife().");
            }
            var entity = CreateEntity();
            entity.AddLife(newValue);
            return entity;
        }

        public Entity ReplaceLife(int newValue) {
            var entity = lifeEntity;
            if (entity == null) {
                entity = SetLife(newValue);
            } else {
                entity.ReplaceLife(newValue);
            }

            return entity;
        }

        public void RemoveLife() {
            DestroyEntity(lifeEntity);
        }
    }

    public partial class Matcher {
        static IMatcher _matcherLife;

        public static IMatcher Life {
            get {
                if (_matcherLife == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.Life);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherLife = matcher;
                }

                return _matcherLife;
            }
        }
    }
}
