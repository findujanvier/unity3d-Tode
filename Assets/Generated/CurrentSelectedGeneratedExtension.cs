//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {
    public partial class Entity {
        public CurrentSelected currentSelected { get { return (CurrentSelected)GetComponent(ComponentIds.CurrentSelected); } }

        public bool hasCurrentSelected { get { return HasComponent(ComponentIds.CurrentSelected); } }

        public Entity AddCurrentSelected(Entitas.Entity newE) {
            var component = CreateComponent<CurrentSelected>(ComponentIds.CurrentSelected);
            component.e = newE;
            return AddComponent(ComponentIds.CurrentSelected, component);
        }

        public Entity ReplaceCurrentSelected(Entitas.Entity newE) {
            var component = CreateComponent<CurrentSelected>(ComponentIds.CurrentSelected);
            component.e = newE;
            ReplaceComponent(ComponentIds.CurrentSelected, component);
            return this;
        }

        public Entity RemoveCurrentSelected() {
            return RemoveComponent(ComponentIds.CurrentSelected);
        }
    }

    public partial class Pool {
        public Entity currentSelectedEntity { get { return GetGroup(Matcher.CurrentSelected).GetSingleEntity(); } }

        public CurrentSelected currentSelected { get { return currentSelectedEntity.currentSelected; } }

        public bool hasCurrentSelected { get { return currentSelectedEntity != null; } }

        public Entity SetCurrentSelected(Entitas.Entity newE) {
            if (hasCurrentSelected) {
                throw new EntitasException("Could not set currentSelected!\n" + this + " already has an entity with CurrentSelected!",
                    "You should check if the pool already has a currentSelectedEntity before setting it or use pool.ReplaceCurrentSelected().");
            }
            var entity = CreateEntity();
            entity.AddCurrentSelected(newE);
            return entity;
        }

        public Entity ReplaceCurrentSelected(Entitas.Entity newE) {
            var entity = currentSelectedEntity;
            if (entity == null) {
                entity = SetCurrentSelected(newE);
            } else {
                entity.ReplaceCurrentSelected(newE);
            }

            return entity;
        }

        public void RemoveCurrentSelected() {
            DestroyEntity(currentSelectedEntity);
        }
    }

    public partial class Matcher {
        static IMatcher _matcherCurrentSelected;

        public static IMatcher CurrentSelected {
            get {
                if (_matcherCurrentSelected == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.CurrentSelected);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherCurrentSelected = matcher;
                }

                return _matcherCurrentSelected;
            }
        }
    }
}
